



Remote ATtestation ProcedureS                                M. Brossard
Internet-Draft                                                T. Fossati
Intended status: Informational                             H. Tschofenig
Expires: 7 April 2023                                                arm
                                                          4 October 2022


                         Key Attestation Token
                       draft-bft-rats-kat-latest

Abstract

   This document defines an evidence format for key attestation.

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Discussion of this document takes place on the Remote ATtestation
   ProcedureS Working Group mailing list (rats@ietf.org), which is
   archived at https://mailarchive.ietf.org/arch/browse/rats/.

   Source for this draft and an issue tracker can be found at
   https://github.com/thomas-fossati/draft-kat.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 7 April 2023.

Copyright Notice

   Copyright (c) 2022 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Key Attesatation Token
     3.1.  Proof-of-Possession
     3.2.  KAT Bundle
   4.  Examples
   5.  Security Considerations
   6.  IANA Considerations
   7.  References
     7.1.  Normative References
     7.2.  Informative References
   Appendix A.  Amalgamated CDDL
   Acknowledgments
   Authors' Addresses

1.  Introduction

   This document defines an evidence format for key attestation.

   TODO

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   In this document, CDDL [RFC8610] [RFC9165] is used to describe the
   data formats.

   The examples in Section 4 use CBOR diagnostic notation defined in
   Section 8 of [STD94] and Appendix G of [RFC8610].

   The reader is assumed to be familiar with the vocabulary and concepts
   defined in [I-D.ietf-rats-architecture].

3.  Key Attesatation Token

3.1.  Proof-of-Possession

   [RFC8747]

   KAS is the Issuer TLS-B is the Presenter TLS-A is the Recipient

   kat = {
       &(eat_nonce: 10) => bstr .size (8..64)
       &(cnf: 8) => ak-pub
       &(kak-pub: 2500) => COSE_Key
   }

   ak-pub = cnf-map

   cnf-map = {
       &(cose-key: 1) => COSE_Key
   }

                          Figure 1: KAT definition

3.2.  KAT Bundle

   [I-D.frost-rats-eat-collection]

   kat-bundle = {
       &(eat_profile: 265) => "http://arm.com/kat/1.0.0"
       "kat" => COSE-Sign1-kat
       "psa-token" => Tagged-COSE-psa-token
   }

                      Figure 2: KAT bundle definition

4.  Examples

   {
       / nonce / 10: h'b91b03129222973c214e42bf31d6872a3ef2dbdda401fbd1
   f725d48d6bf9c817',
       / kak-pub / 2500: {
           / kty /  1: 2, / EC2 /
           / crv / -1: 1, / P-256 /
           / x /   -2: h'F0FFFA7BA35E76E44CA1F5446D327C8382A5A40E5F2974
   5DF948346C7C88A5D3',
           / y /   -3: h'7CB4C4873CBB6F097562F61D5280768CD2CFE35FBA97E9
   97280DBAAAE3AF92FE'
       },
       / cnf / 8: {
           / COSE_Key / 1: {
               / kty /  1: 2, / EC2 /
               / crv / -1: 1, / P-256 /
               / x /   -2: h'D7CC072DE2205BDC1537A543D53C60A6ACB62ECCD8
   90C7FA27C9E354089BBE13',
               / y /   -3: h'F95E1D4B851A2CC80FFF87D8E23F22AFB725D535E5
   15D020731E79A3B4E47120'
           }
       }
   }

                               Figure 3: KAT

5.  Security Considerations

   TODO Security

6.  IANA Considerations

   TODO IANA

7.  References

7.1.  Normative References

   [I-D.frost-rats-eat-collection]
              Frost, S., "Entity Attestation Token (EAT) Collection
              Type", Work in Progress, Internet-Draft, draft-frost-rats-
              eat-collection-01, 27 June 2022,
              <https://datatracker.ietf.org/doc/html/draft-frost-rats-
              eat-collection-01>.

   [I-D.ietf-rats-eat]
              Lundblade, L., Mandyam, G., O'Donoghue, J., and C.
              Wallace, "The Entity Attestation Token (EAT)", Work in
              Progress, Internet-Draft, draft-ietf-rats-eat-15, 1
              October 2022, <https://datatracker.ietf.org/doc/html/
              draft-ietf-rats-eat-15>.

   [I-D.tschofenig-rats-psa-token]
              Tschofenig, H., Frost, S., Brossard, M., Shaw, A. L., and
              T. Fossati, "Arm's Platform Security Architecture (PSA)
              Attestation Token", Work in Progress, Internet-Draft,
              draft-tschofenig-rats-psa-token-10, 6 September 2022,
              <https://datatracker.ietf.org/doc/html/draft-tschofenig-
              rats-psa-token-10>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8610]  Birkholz, H., Vigano, C., and C. Bormann, "Concise Data
              Definition Language (CDDL): A Notational Convention to
              Express Concise Binary Object Representation (CBOR) and
              JSON Data Structures", RFC 8610, DOI 10.17487/RFC8610,
              June 2019, <https://www.rfc-editor.org/rfc/rfc8610>.

   [RFC8747]  Jones, M., Seitz, L., Selander, G., Erdtman, S., and H.
              Tschofenig, "Proof-of-Possession Key Semantics for CBOR
              Web Tokens (CWTs)", RFC 8747, DOI 10.17487/RFC8747, March
              2020, <https://www.rfc-editor.org/rfc/rfc8747>.

   [RFC9165]  Bormann, C., "Additional Control Operators for the Concise
              Data Definition Language (CDDL)", RFC 9165,
              DOI 10.17487/RFC9165, December 2021,
              <https://www.rfc-editor.org/rfc/rfc9165>.

   [STD94]    Bormann, C. and P. Hoffman, "Concise Binary Object
              Representation (CBOR)", STD 94, RFC 8949,
              DOI 10.17487/RFC8949, December 2020,
              <https://www.rfc-editor.org/rfc/rfc8949>.

   [STD96]    Schaad, J., "CBOR Object Signing and Encryption (COSE):
              Structures and Process", STD 96, RFC 9052,
              DOI 10.17487/RFC9052, August 2022,
              <https://www.rfc-editor.org/rfc/rfc9052>.

7.2.  Informative References

   [I-D.ietf-rats-architecture]
              Birkholz, H., Thaler, D., Richardson, M., Smith, N., and
              W. Pan, "Remote Attestation Procedures Architecture", Work
              in Progress, Internet-Draft, draft-ietf-rats-architecture-
              22, 28 September 2022,
              <https://datatracker.ietf.org/doc/html/draft-ietf-rats-
              architecture-22>.

Appendix A.  Amalgamated CDDL

   start = kat-bundle

   kat-bundle = {
       &(eat_profile: 265) => "http://arm.com/kat/1.0.0"
       "kat" => COSE-Sign1-kat
       "psa-token" => Tagged-COSE-psa-token
   }

   kat = {
       &(eat_nonce: 10) => bstr .size (8..64)
       &(cnf: 8) => ak-pub
       &(kak-pub: 2500) => COSE_Key
   }

   ak-pub = cnf-map

   cnf-map = {
       &(cose-key: 1) => COSE_Key
   }

   COSE-Sign1-kat = [
       protected: bytes .cbor kat-protected-headers
       unprotected: {}
       payload: bytes .cbor kat
       signature: bytes
   ]

   kat-protected-headers = {
       &(alg-id: 1) => int
   }

   psa-token = {
       psa-nonce
       psa-instance-id
       psa-verification-service-indicator
       psa-profile
       psa-implementation-id
       psa-client-id
       psa-lifecycle
       psa-certification-reference
       ? psa-boot-seed
       psa-software-components
   }

   psa-client-id-key = 2394
   psa-lifecycle-key = 2395
   psa-implementation-id-key = 2396
   psa-boot-seed-key = 2397
   psa-certification-reference-key = 2398
   psa-software-components-key = 2399
   psa-verification-service-indicator-key = 2400

   nonce-label = 10
   ueid-label = 256
   profile-label = 265

   psa-hash-type = bytes .size 32 / bytes .size 48 / bytes .size 64

   psa-boot-seed-type = bytes .size (8..32)

   psa-boot-seed = (
       psa-boot-seed-key => psa-boot-seed-type
   )

   psa-client-id-nspe-type = -2147483648...0
   psa-client-id-spe-type = 1..2147483647

   psa-client-id-type = psa-client-id-nspe-type / psa-client-id-spe-type

   psa-client-id = (
       psa-client-id-key => psa-client-id-type
   )

   psa-certification-reference-type = text .regexp "[0-9]{13}-[0-9]{5}"

   psa-certification-reference = (
       ? psa-certification-reference-key =>
           psa-certification-reference-type
   )

   psa-implementation-id-type = bytes .size 32

   psa-implementation-id = (
       psa-implementation-id-key => psa-implementation-id-type
   )

   psa-instance-id-type = bytes .size 33

   psa-instance-id = (
       ueid-label => psa-instance-id-type
   )

   psa-nonce = (
       nonce-label => psa-hash-type
   )

   psa-profile-type = "http://arm.com/psa/2.0.0"

   psa-profile = (
       profile-label => psa-profile-type
   )

   psa-lifecycle-unknown-type = 0x0000..0x00ff
   psa-lifecycle-assembly-and-test-type = 0x1000..0x10ff
   psa-lifecycle-psa-rot-provisioning-type = 0x2000..0x20ff
   psa-lifecycle-secured-type = 0x3000..0x30ff
   psa-lifecycle-non-psa-rot-debug-type = 0x4000..0x40ff
   psa-lifecycle-recoverable-psa-rot-debug-type = 0x5000..0x50ff
   psa-lifecycle-decommissioned-type = 0x6000..0x60ff

   psa-lifecycle-type =
       psa-lifecycle-unknown-type /
       psa-lifecycle-assembly-and-test-type /
       psa-lifecycle-psa-rot-provisioning-type /
       psa-lifecycle-secured-type /
       psa-lifecycle-non-psa-rot-debug-type /
       psa-lifecycle-recoverable-psa-rot-debug-type /
       psa-lifecycle-decommissioned-type

   psa-lifecycle = (
       psa-lifecycle-key => psa-lifecycle-type
   )

   psa-software-component = {
     ? &(measurement-type: 1) => text
       &(measurement-value: 2) => psa-hash-type
     ? &(version: 4) => text
       &(signer-id: 5) => psa-hash-type
     ? &(measurement-desc: 6) => text
   }

   psa-software-components = (
       psa-software-components-key => [ + psa-software-component ]
   )

   psa-verification-service-indicator-type = text

   psa-verification-service-indicator = (
       ? psa-verification-service-indicator-key =>
           psa-verification-service-indicator-type
   )


   Tagged-COSE-psa-token = Tagged-COSE-Sign1-psa-token /
                           Tagged-COSE-Mac0-psa-token

   Tagged-COSE-Sign1-psa-token = #6.18(COSE-Sign1-psa-token)

   COSE-Sign1-psa-token = [
       protected: bytes .cbor psa-token-protected-headers
       unprotected: {}
       payload: bytes .cbor psa-token
       signature: bytes
   ]

   Tagged-COSE-Mac0-psa-token = #6.17(COSE-Mac0-psa-token)

   COSE-Mac0-psa-token = [
       protected: bytes .cbor psa-token-protected-headers
       unprotected: {}
       payload: bytes .cbor psa-token
       tag: bytes
   ]

   psa-token-protected-headers = {
       &(alg-id: 1) => int
   }

   label = int / text
   values = any

   COSE_Key = {
       &(kty: 1) => text / int
       ? &(kid: 2) => bytes
       ? &(alg: 3) => text / int
       ? &(key_ops: 4) => [+ (text / int) ]
       ? &(base_iv: 5) => bytes
       * label => values
   }

Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Mathias Brossard
   arm
   Email: mathias.brossard@arm.com


   Thomas Fossati
   arm
   Email: thomas.fossati@arm.com


   Hannes Tschofenig
   arm
   Email: hannes.tschofenig@arm.com
